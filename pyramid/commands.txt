Django application requirements

In the file "settings.py", os needs to be imported, the ALLOWED_HOSTS attribute need to have the server IP  and STATIC ROOT the path to the staticfiles folder : 
import os

ALLOWED_HOSTS = ["10.109.254.118"]  
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')


Host server requirements
To transfer the project to another server through ssh use the following command, not that we first transfer into PlayerJPNou to avoid restrictions, and then we move the application in /var/www

scp -r pyramid SSHuserName@10.109.254.118:/var/www/PlayerJPNou
sudo mv pyramid /var/www

 Change ubuntu mirror
sudo nano /etc/apt/sources.list
Replace ro.archive.ubuntu.com  and security.archive.ubuntu.com with:
http://archive.ubuntu.com/ubuntu

Update the server packages and restart system :
sudo apt update
sudo systemctl restart systemd-resolved

Install apache2 service, wsgi python module and python virtual environment :
sudo apt install apache2 libapache2-mod-wsgi-py3
sudo apt install python3.10-venv            or pip install virtualenv

Go into the Django application folder, create a python virtual environment and activate it :
cd /var/www/pyramid
python3 -m venv venv - do not use sudo
source venv/bin/activate

Install Django framework and create the PYTHONPATH environment variable :
#SKIP sudo chown -R $(whoami) /var/www/pyramid/venv
#SKIP sudo apt install python3-pip
pip install django
export PYTHONPATH=/var/www/pyramid

Inside the DjangoApp collect static files into the staticfiles path by having venv activated and running the following commands : 
python3 -m pip install load_dotenv  + (try to implement requirements.txt script for all)
python3 -m pip install djangorestframework-simplejwt
python3 -m pip install rest_framework_simplejwt
pip install dj_database_url
pip install django-cors-headers
mkdir staticfiles/  - do not use sudo

#SKIP sudo chown -R www-data:www-data /var/www/pyramid/staticfiles/
#SKIP sudo chmod -R 775 /var/www/pyramid/staticfiles/
#SKIP sudo systemctl restart apache2

python3 manage.py collectstatic - do not use sudo

Allow writing to the database by giving rights to the sqlite and the application : 
sudo chown www-data:www-data /var/www/pyramid/db.sqlite3
sudo chmod 664 /var/www/pyramid/db.sqlite3
sudo chown -R www-data:www-data /var/www/pyramid/
sudo chmod -R 775 /var/www/pyramid/
sudo systemctl restart apache2

Configure the sites-available on the server :
sudo nano /etc/apache2/sites-available/pyramid.conf

<VirtualHost *:80>
    ServerName 10.109.254.118
    DocumentRoot /var/www/pyramid

    Alias /static /var/www/pyramid/staticfiles
    <Directory /var/www/pyramid/staticfiles>
        Require all granted
    </Directory>

    <Directory /var/www/pyramid/pyramid>
        <Files wsgi.py>
            Require all granted
        </Files>
    </Directory>

    WSGIDaemonProcess pyramid python-home=/var/www/pyramid/venv python-path=/var/www/pyramid
    WSGIScriptAlias / /var/www/pyramid/pyramid/wsgi.py
    WSGIPassAuthorization On

    <Directory /var/www/pyramid/pyramid>
        WSGIProcessGroup pyramid
        WSGIApplicationGroup %{GLOBAL}
        Require all granted
    </Directory>

    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined
</VirtualHost>

Enable the Site & Restart Apache : 
sudo a2ensite pyramid.conf
sudo systemctl restart apache2

#SKIP sudo su
#SKIP source /venv/bin/activate
#SKIP pip install django

Note!
The path to the database connection has to be absolute when deployed on server : 
conn = sqlite3.connect("/var/www/pyramid/db.sqlite3") 
NOT conn = sqlite3.connect("db.sqlite3")

if raw queries are required
sqlite3 /var/www/pyramid/db.sqlite3 ".recover"
sqlite3 db.sqlite3


Steps to replace the already deployed application:
deactivate
cd /var/www/pyramid
python3 -m venv venv
source venv/bin/activate
python3 -m pip install load_dotenv
python3 -m pip install djangorestframework-simplejwt
python3 -m pip install rest_framework_simplejwt
pip install dj_database_url
pip install django-cors-headers
pip install django-extensions

mkdir staticfiles/ 
python3 manage.py collectstatic
sudo chmod 664 /var/www/pyramid/db.sqlite3
sudo chown -R www-data:www-data /var/www/pyramid/
sudo systemctl restart apache2


If needed, on a freshly migrated db, run:

python3 manage.py shell
from django.contrib.auth.models import Group
from authentication.models import CustomUser
# Create roles
manager_group, _ = Group.objects.get_or_create(name="Manager")
attendent_group, _ = Group.objects.get_or_create(name="Attendent")
cashier_group, _ = Group.objects.get_or_create(name="Cashier")

# Assign user to role
user = CustomUser.objects.get_or_create(username="eurogames")dent
user.groups.add(attendent_group)

sudo apt install postgresql libpq-dev
sudo apt update
sudo apt install postgresql postgresql-contrib
sudo -u postgres psql

CREATE DATABASE pyramid;
CREATE USER eurogames WITH PASSWORD 'pyramid';
ALTER ROLE eurogames SET client_encoding TO 'utf8';
ALTER ROLE eurogames SET default_transaction_isolation TO 'read committed';
ALTER ROLE eurogames SET timezone TO 'UTC';
GRANT ALL PRIVILEGES ON DATABASE pyramid TO eurogames;
\q

ensure postgresql adaptor is installed
pip install psycopg2-binary

install pgadmin ui postgresql db

curl -fsS https://www.pgadmin.org/static/packages_pgadmin_org.pub | sudo gpg --dearmor -o /usr/share/keyrings/packages-pgadmin-org.gpg
----------------------------------------------------------------------------------------------------
sudo sh -c 'echo "deb [signed-by=/usr/share/keyrings/packages-pgadmin-org.gpg] https://ftp.postgresql.org/pub/pgadmin/pgadmin4/apt/$(lsb_release -cs) pgadmin4 main" > /etc/apt/sources.list.d/pgadmin4.list && apt update'

#
# Install pgAdmin
#

# Install for both desktop and web modes:
sudo apt install pgadmin4

# Install for desktop mode only:
sudo apt install pgadmin4-desktop

# Install for web mode only: 
sudo apt install pgadmin4-web 

# Configure the webserver, if you installed pgadmin4-web:
sudo /usr/pgadmin4/bin/setup-web.sh



Error log checking : sudo cat /var/log/apache2/error.log | tail -n 20


Avoid hardcoding paths like sqlite3.connect("db.sqlite3"). Instead, use Django's ORM or at least an absolute path:
pythonCopyEditimport os
from django.conf import settings

db_path = os.path.join(settings.BASE_DIR, 'db.sqlite3')
conn = sqlite3.connect(db_path)

If the dbsqlite3 has problems run: PRAGMA integrity_check;
Error log checking : 
sudo cat /var/log/apache2/error.log | tail -n 20


To make Django know where the settings.py configuration file is run:
export DJANGO_SETTINGS_MODULE=pyramid.settings
On remote server activate venv and run:
DJANGO_SETTINGS_MODULE=pyramid.settings python3 manage.py shell


Restart Postgres 
sudo service postgresql start
sudo service postgresql status



Open hba file 
sudo nano /etc/postgresql/14/main/pg_hba.conf  
md5 means required password - peer means on localhost not required if sudo

Switch to postgres user 
sudo -i -u postgres

To create a postgress database 
createdb -O myuser mydb

Alternative to delete and create database 
sudo -i -u postgres / psql / DROP DATABASE your_database_name; / CREATE DATABASE your_database_name;

# Drop database tables (be careful!)
python3 manage.py flush

